{"version":3,"sources":["elements/Case.js","elements/Pion.js","elements/Plateau.js","elements/PopUp.js","App.js","serviceWorker.js","index.js"],"names":["Case","props","moveInside","plateau","state","choosing","isChoosing","glowing","pos","changeTurn","pion","move","x","y","pions","color","style","background","active","this","type","checkLine","className","onClick","Component","Pion","pionsArray","console","log","tetst","changePions","newState","isFirstTour","size","askPopUp","changeType","bind","changeKingPos","team","setState","newType","die","winnerTeam","isDead","showCase","e","teamTurn","stopPropagation","allPossibleCases","getAllPossibleCases","change","finalCoords","pawnMoves","rookMoves","knightMoves","bishopMoves","queenMoves","kingMoves","newfinalCoords","i","coord","newPionsArray","pionsArrayRow","push","Array","from","kingPos","pionPos","coords","teamMod","inRange","currPion","concat","goInLine","rockCoords","checkRockLine","kingLine","direction","lineCoords","linePos","colors","pionSize","getThis","borderColor","top","left","width","height","transform","rotation","num","Plateau","teamOnPat","pionRow","length","teamOnMat","king","chooseCase","emptyArray","createArrayCases","cases","pionsPattern","echec","createArrayPions","white","black","newCasesArray","start","end","movingPion","splice","testPat","testMat","inEchec","newKingPos","plateauArray","plateauArrayRow","j","newPions","key","firstColor","first","secondaryColor","renderPions","secondary","typeToChange","changeArray","gridTemplate","border","id","renderPlateau","PopUp","renderPopup","React","App","startRotation","getAngle","clientX","window","innerWidth","clientY","innerHeight","lastAngle","clicked","stopRotation","currRotation","lastRotation","cursorAngle","rotateTooTurn","Math","atan2","PI","askNewType","func","zIndex","onDoubleClick","onMouseMove","onMouseUp","onMouseOut","onMouseDown","createPopUp","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22315e2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../build/case.min.css';\n\nexport default class Case extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            color: this.props.color,\n            pion: false,\n            pos: {\n                x: this.props.x,\n                y: this.props.y\n            },\n            style: {\n                background: this.props.color\n            },\n            glowing: this.props.glowing\n        };\n        this.plateau = this.props.plateau;\n    }\n\n    render() {\n        let active = (this.props.glowing) ? \"active\" : \"\";\n        let pion = this.plateau.state.pions[this.state.pos.x][this.state.pos.y];\n        if (pion !== \"empty\") { active += \"-kill\" }\n        if (pion !== \"empty\") {\n            if (pion.state.type === \"king\") {\n                if (!pion.checkLine(pion.state.pos,this.plateau.state.pions)) {\n                    active += \" danger\";\n                }\n\n            }\n\n        }\n        return (\n            <div className={\"case \" + active} onClick={this.moveInside} x={this.state.pos.x} y={this.state.pos.y} style={this.state.style}></div>\n        );\n    }\n\n    moveInside = () => {\n        if (this.plateau.state.choosing.isChoosing && this.props.glowing) {\n            let pos = this.state.pos;\n            this.props.changeTurn();\n            this.plateau.state.choosing.pion.move(pos.x,pos.y,this.plateau.state.pions);\n        }\n    }\n\n}\n","import React, { Component } from 'react';\nimport '../build/pion.min.css';\n\nexport default class Pion extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colors: this.props.colors,\n            isDead: false,\n            team: this.props.team,\n            type: this.props.type,\n            pos: {\n                x: this.props.x,\n                y: this.props.y\n            },\n            isFirstTour: true\n        };\n        this.plateau = this.props.plateau;\n        this.pionSize = 100 / this.plateau.state.size;\n        this.props.getThis(this);\n        if (this.state.type === \"king\") {\n            this.props.changeKingPos(this.state.team,this.state.pos);\n        }\n\n        /*if (this.state.type === \"king\" && !this.props.echec.inEchec) {\n            let pionsArray = this.plateau.state.pions;\n            let test = this.checkLine(this.state.pos,pionsArray);\n            if (!test) {\n                this.props.inEchec(this.state.pos);\n            }\n\n        }*/\n    }\n\n    render() {\n        let isDead = (this.state.isDead) ? \"dead \" : \"\";\n        let colors = this.props.colors;\n        let style = {\n            color: colors.borderColor,\n            borderColor: colors.borderColor,\n            background: colors.color,\n\n            top: this.state.pos.y*this.pionSize+\"%\",\n            left: this.state.pos.x*this.pionSize+\"%\",\n\n            width: this.pionSize + \"%\",\n            height: this.pionSize + \"%\",\n            transform: \"rotate(\" + -this.props.rotation + \"deg)\"\n        }\n\n\n        return (\n            <div className={\"pion \" + isDead} onClick={this.showCase} style={style}>\n                <i className={\"fas fa-chess-\"+this.state.type}></i>\n            </div>\n        );\n\n    }\n\n    move = (x,y,pionsArray) => {\n        console.log(this);\n        let pos = this.state.pos;\n        let tetst = this.props.changePions(this,[pos.x,pos.y],[x,y]);\n        console.log(tetst);\n        let newState = {\n            pos: {\n                x: x,\n                y: y\n            },\n            isFirstTour: false\n        }\n        if (this.state.type === \"pawn\" && (y === 0 || y === this.plateau.state.size -1)) {\n            this.props.askPopUp(\"endPlateau\",\"\",this.changeType.bind(this));\n        }\n        if (this.state.type === \"king\") {\n            if (pos.x - x === 2) {\n                console.log(tetst[0][pos.y]);\n                tetst[0][pos.y].move(pos.x-1,pos.y,tetst);\n            } else if (pos.x - x === -2) {\n                console.log(tetst[7][pos.y]);\n                tetst[7][pos.y].move(pos.x+1,pos.y,tetst);\n            }\n            this.props.changeKingPos(this.state.team,newState.pos);\n        }\n\n        this.setState(newState);\n    }\n\n    changeType = (newType) => {\n        this.setState({type: newType});\n    }\n\n    die = () => {\n        if (this.state.type === \"king\") {\n            let winnerTeam = (this.state.team === \"white\") ? \"black\" : \"white\";\n            this.props.askPopUp(\"win\",winnerTeam,this.changeType.bind(this));\n        }\n        this.setState({isDead: true})\n    }\n\n\n    inRange(num) {\n        return (num < this.plateau.state.size && num >= 0) ? true : false;\n    }\n\n    showCase = (e) => {\n        if (!this.state.isDead && this.plateau.state.teamTurn === this.state.team) {\n            e.stopPropagation();\n            let allPossibleCases = this.getAllPossibleCases(this.plateau.state.pions);\n            this.props.change(allPossibleCases,this);\n        }\n    }\n\n    getAllPossibleCases = (pionsArray) => {\n        let finalCoords = [];\n        let pos = this.state.pos;\n        switch (this.state.type) {\n            case \"pawn\":\n                finalCoords = this.pawnMoves(pos,pionsArray);\n                break;\n            case \"rook\":\n                finalCoords = this.rookMoves(pos,pionsArray);\n                break;\n            case \"knight\":\n                finalCoords = this.knightMoves(pos,pionsArray);\n                break;\n            case \"bishop\":\n                finalCoords = this.bishopMoves(pos,pionsArray);\n                break;\n            case \"queen\":\n                finalCoords = this.queenMoves(pos,pionsArray);\n                break;\n            case \"king\":\n                finalCoords = this.kingMoves(pos,pionsArray);\n                break;\n            default: console.log(\"rien\");\n        }\n        if (this.state.type !== \"king\") {\n            let newfinalCoords = [];\n            for (let i in finalCoords) {\n                let coord = finalCoords[i];\n\n                let newPionsArray = [];\n\n                for (let pionsArrayRow of pionsArray) {\n                    newPionsArray.push(Array.from(pionsArrayRow));\n                }\n\n                newPionsArray[coord[0]][coord[1]] = newPionsArray[pos.x][pos.y];\n                newPionsArray[pos.x][pos.y] = \"empty\";\n\n                let kingPos = this.props.kingPos[this.state.team];\n                if (this.checkLine(kingPos,newPionsArray)) {\n\n                    newfinalCoords.push(coord);\n                }\n            }\n            return newfinalCoords;\n        } else {\n            return finalCoords;\n        }\n    }\n\n    // PION MOVES ////////////////\n\n    pawnMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        let teamMod = (this.state.team === \"black\") ? 1 : -1;\n\n        if (pionsArray[pionPos.x][pionPos.y+teamMod*1] === \"empty\") {\n            coords.push([pionPos.x,pionPos.y+teamMod*1]);\n            if (this.state.isFirstTour && pionsArray[pionPos.x][pionPos.y+teamMod*2] === \"empty\")\n                coords.push([pionPos.x,pionPos.y+teamMod*2]);\n        }\n        if (this.inRange(pionPos.y+teamMod*1)) {\n            if (this.inRange(pionPos.x+1)) {\n                let currPion = pionsArray[pionPos.x+1][pionPos.y+teamMod*1];\n                if (currPion !== \"empty\") {\n                    if (currPion.state.team !== this.state.team)\n                        coords.push([pionPos.x+1,pionPos.y+teamMod*1]);\n                }\n            }\n\n            if (this.inRange(pionPos.x-1)) {\n                let currPion = pionsArray[pionPos.x-1][pionPos.y+teamMod*1];\n                if (currPion !== \"empty\") {\n                    if (currPion.state.team !== this.state.team)\n                        coords.push([pionPos.x-1,pionPos.y+teamMod*1]);\n                }\n            }\n        }\n        return coords;\n    }\n\n    rookMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        return coords.concat(\n            this.goInLine(8,[1,0],pionPos,pionsArray),\n            this.goInLine(8,[-1,0],pionPos,pionsArray),\n            this.goInLine(8,[0,1],pionPos,pionsArray),\n            this.goInLine(8,[0,-1],pionPos,pionsArray)\n        );\n    }\n\n    bishopMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        return coords.concat(\n            this.goInLine(8,[1,1],pionPos,pionsArray),\n            this.goInLine(8,[-1,1],pionPos,pionsArray),\n            this.goInLine(8,[-1,-1],pionPos,pionsArray),\n            this.goInLine(8,[1,-1],pionPos,pionsArray)\n        );\n    }\n\n    queenMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        return coords.concat(\n            this.goInLine(8,[1,1],pionPos,pionsArray),\n            this.goInLine(8,[-1,1],pionPos,pionsArray),\n            this.goInLine(8,[-1,-1],pionPos,pionsArray),\n            this.goInLine(8,[1,-1],pionPos,pionsArray),\n            this.goInLine(8,[1,0],pionPos,pionsArray),\n            this.goInLine(8,[-1,0],pionPos,pionsArray),\n            this.goInLine(8,[0,1],pionPos,pionsArray),\n            this.goInLine(8,[0,-1],pionPos,pionsArray)\n        );\n    }\n    kingMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        let rockCoords = [];\n        if (this.state.isFirstTour) {\n            if (this.checkRockLine([1,0],pionPos,pionsArray)) {\n                console.log(\"rigth\");\n                if (this.checkLine({x:pionPos.x+2,y:pionPos.y},pionsArray)) {\n                    rockCoords.push([pionPos.x+2,pionPos.y,\"rock\"]);\n                }\n            }\n            if (this.checkRockLine([-1,0],pionPos,pionsArray)) {\n                console.log(\"lzft\");\n                if (this.checkLine({x:pionPos.x-2,y:pionPos.y},pionsArray)) {\n                    rockCoords.push([pionPos.x-2,pionPos.y,\"rock\"]);\n                }\n            }\n        }\n\n        //console.log(rockCoords);\n        return coords.concat(\n            this.kingLine([1,1],pionPos,pionsArray),\n            this.kingLine([-1,1],pionPos,pionsArray),\n            this.kingLine([-1,-1],pionPos,pionsArray),\n            this.kingLine([1,-1],pionPos,pionsArray),\n            this.kingLine([1,0],pionPos,pionsArray),\n            this.kingLine([-1,0],pionPos,pionsArray),\n            this.kingLine([0,1],pionPos,pionsArray),\n            this.kingLine([0,-1],pionPos,pionsArray),\n            rockCoords\n        );\n    }\n    knightMoves = (pionPos,pionsArray) => {\n        let coords = [];\n        return coords.concat(\n            this.goInLine(2,[2,1],pionPos,pionsArray),\n            this.goInLine(2,[-2,-1],pionPos,pionsArray),\n            this.goInLine(2,[-2,1],pionPos,pionsArray),\n            this.goInLine(2,[2,-1],pionPos,pionsArray),\n            this.goInLine(2,[1,2],pionPos,pionsArray),\n            this.goInLine(2,[-1,-2],pionPos,pionsArray),\n            this.goInLine(2,[-1,2],pionPos,pionsArray),\n            this.goInLine(2,[1,-2],pionPos,pionsArray)\n        );\n    }\n\n\n\n    // pions repetitive Move ////\n\n    goInLine = (size,direction,pionPos,pionsArray) => {\n        let lineCoords = [];\n        for (let i = 1; i < size; i++) {\n            let linePos = [pionPos.x+(direction[0]*i),pionPos.y+(direction[1]*i)];\n            if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) return lineCoords;\n            if (pionsArray[linePos[0]][linePos[1]] !== \"empty\") {\n                if (pionsArray[linePos[0]][linePos[1]].state.team !== this.state.team) {\n                    lineCoords.push(linePos);\n                }\n                return lineCoords;\n            }\n            lineCoords.push(linePos);\n        }\n        return lineCoords;\n    }\n\n    kingLine = (direction,pionPos,pionsArray) => {\n        let lineCoords = [];\n        let linePos = [pionPos.x+(direction[0]),pionPos.y+(direction[1])];\n        if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) return lineCoords;\n        if (pionsArray[linePos[0]][linePos[1]] !== \"empty\") {\n            if (pionsArray[linePos[0]][linePos[1]].state.team === this.state.team) {\n                if (pionsArray[linePos[0]][linePos[1]].state.type == \"king\") {\n                    let test = this.checkLine({x: linePos[0], y: linePos[1]},pionsArray);\n                    if (test) {\n                        lineCoords.push(linePos);\n                    }\n                }\n            }\n            if (pionsArray[linePos[0]][linePos[1]].state.team !== this.state.team) {\n                let test = this.checkLine({x: linePos[0], y: linePos[1]},pionsArray);\n                if (test) {\n                    lineCoords.push(linePos);\n                }\n\n            }\n            return lineCoords;\n        }\n        let test = this.checkLine({x: linePos[0], y: linePos[1]},pionsArray);\n        if (test) {\n            lineCoords.push(linePos);\n        }\n        return lineCoords;\n    }\n\n    checkRockLine = (direction,pos,pionsArray) => {\n\n        for (let i = 1; i < 8; i++) {\n            let linePos = [pos.x+(direction[0]*i),pos.y+(direction[1]*i)];\n            if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) break;\n            let pion = pionsArray[linePos[0]][linePos[1]];\n            if (pion !== \"empty\") {\n                if (pion.state.team === this.state.team && pion.state.type === \"rook\") {\n                    return true;\n                } else {\n                    break;\n                }\n            }\n        }\n        return false;\n    }\n\n    checkLine = (pos,pionsArray) => {\n        let directions = [];\n\n        // check Pawn\n\n        directions = (this.state.team === \"white\") ? [[-1,-1],[1,-1]] : [[-1,1],[1,1]];\n        for (let direction of directions) {\n            for (let i = 1; i < 2; i++) {\n                let linePos = [pos.x+(direction[0]*i),pos.y+(direction[1]*i)];\n                if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) break;\n                let pion = pionsArray[linePos[0]][linePos[1]];\n                if (pion !== \"empty\") {\n                    if (pion.state.team !== this.state.team) {\n                        if (pion.state.type === \"pawn\") {\n                            return false;\n                        }\n                    }\n                    if (pion.state.type !== \"king\") break;\n                }\n            }\n        }\n\n        // check king,queen and bishop\n\n        directions = [[1,1],[-1,1],[1,-1],[-1,-1]];\n        for (let direction of directions) {\n            for (let i = 1; i < 8; i++) {\n                let linePos = [pos.x+(direction[0]*i),pos.y+(direction[1]*i)];\n                if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) break;\n                let pion = pionsArray[linePos[0]][linePos[1]];\n                if (pion !== \"empty\") {\n                    if (pion.state.team !== this.state.team) {\n                        if (pion.state.type === \"king\" && i <= 1) return false;\n                        switch (pion.state.type) {\n                            case \"queen\":\n                            case \"bishop\":\n                                return false;\n                            default:\n                                break;\n                        }\n                        break;\n                    }\n                    if (pion.state.type !== \"king\") break;\n                }\n            }\n        }\n\n        // check king,queen and rook\n\n        directions = [[1,0],[-1,0],[0,-1],[0,1]];\n        for (let direction of directions) {\n            for (let i = 1; i < 8; i++) {\n                let linePos = [pos.x+(direction[0]*i),pos.y+(direction[1]*i)];\n                if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) break;\n                let pion = pionsArray[linePos[0]][linePos[1]];\n                if (pion !== \"empty\") {\n                    if (pion.state.team !== this.state.team) {\n                        if (pion.state.type === \"king\" && i <= 1) return false;\n                        switch (pion.state.type) {\n                            case \"queen\":\n                            case \"rook\":\n                                return false;\n                            default:\n                                break;\n                        }\n                        break;\n                    }\n                    if (pion.state.type !== \"king\") break;\n                }\n            }\n        }\n\n        // check knight\n\n        directions = [[2,1],[-2,-1],[-2,1],[2,-1],[1,2],[-1,-2],[-1,2],[1,2]];\n        for (let direction of directions) {\n            let linePos = [pos.x+(direction[0]),pos.y+(direction[1])];\n            if (!this.inRange(linePos[0]) || !this.inRange(linePos[1])) continue;\n            let pion = pionsArray[linePos[0]][linePos[1]];\n            if (pion !== \"empty\") {\n                if (pion.state.team !== this.state.team) {\n                    if (pion.state.type === \"knight\") return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n","import React, { Component } from 'react';\nimport '../build/plateau.min.css';\nimport Case from './Case';\nimport Pion from './Pion';\n\n\nexport default class Plateau extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pionsPattern: this.props.pionsPattern,\n            colors: this.props.colors,\n            size: this.props.size,\n            cases: this.createArrayCases(),\n            teamTurn: \"white\",\n            choosing: {\n                isChoosing: false,\n                pion: null\n            },\n            echec: false,\n            pions: this.createArrayPions(),\n            kingPos: {\n                white: null,\n                black: null\n            }\n        };\n    }\n\n    changeTurn() {\n        if (this.state.teamTurn === \"white\") {\n            this.setState({teamTurn: \"black\"});\n        } else {\n            this.setState({teamTurn: \"white\"});\n        }\n    }\n\n    changeArray(coords,pion) {\n        let newCasesArray = this.createArrayCases();\n        for (let coord of coords) {\n            if ((coord[0] >= 0 && coord[0] < this.state.size) && coord[1] >= 0 && coord[1] < this.state.size) {\n                newCasesArray[coord[0]][coord[1]] = true;\n            }\n        }\n        this.setState({cases: newCasesArray, choosing: {isChoosing: true, pion: pion}});\n    }\n\n    changePions(pion,start,end) {\n        let newCasesArray = [...this.state.pions];\n        let movingPion = newCasesArray[start[0]].splice(start[1],1,\"empty\");\n        if (newCasesArray[end[0]][end[1]] !== \"empty\") {\n            newCasesArray[end[0]][end[1]].die();\n        }\n        newCasesArray[end[0]][end[1]] = movingPion[0];\n        let kingPos = false;\n        if (pion.state.type == \"king\") {\n            kingPos = {x: end[0], y: end[1]};\n            this.testPat(newCasesArray);\n            this.testMat(newCasesArray,kingPos);\n        } else {\n            this.testPat(newCasesArray);\n            this.testMat(newCasesArray,kingPos);\n        }\n\n        this.setState({pions: newCasesArray});\n        return newCasesArray;\n    }\n\n    inEchec(pos) {\n        this.setState({echec: {inEchec: true, pos: pos}});\n    }\n\n    changeKingPos(team,pos) {\n        let newKingPos = this.state.kingPos;\n        (team === \"white\") ? newKingPos.white = pos : newKingPos.black = pos;\n        this.setState({kingPos: newKingPos});\n    }\n\n    createArrayCases() {\n        let plateauArray = [];\n        for (var i = 0; i < this.props.size; i++) {\n            let plateauArrayRow = [];\n            for (var j = 0; j < this.props.size; j++) {\n                plateauArrayRow.push(false);\n            }\n            plateauArray.push(plateauArrayRow);\n        }\n        return plateauArray;\n    }\n    createArrayPions() {\n        let plateauArray = [];\n        for (var i = 0; i < this.props.size; i++) {\n            let plateauArrayRow = [];\n            for (var j = 0; j < this.props.size; j++) {\n                plateauArrayRow.push(\"empty\");\n            }\n            plateauArray.push(plateauArrayRow);\n        }\n        return plateauArray;\n    }\n\n    getThis(pion) {\n        let newPions = this.state.pions;\n        let pionPos = pion.state.pos;\n        newPions[pionPos.x][pionPos.y] = pion;\n        this.setState({pions: newPions});\n    }\n\n    renderPlateau() {\n        let plateauArray = [];\n        for (var i = 0; i < this.props.size; i++) {\n            let plateauArrayRow = [];\n            for (var j = 0; j < this.props.size; j++) {\n                plateauArrayRow.push(\n                    [\n                        <Case changeTurn={this.changeTurn.bind(this)} key={i+j} x={j} y={i} glowing={this.state.cases[j][i]} plateau={this} color={((j+i)%2 === 0) ? this.state.colors.firstColor.first : this.state.colors.secondaryColor.first}/>,\n                        this.renderPions(i,j)\n                    ]\n                )\n            }\n            plateauArray.push(plateauArrayRow);\n        }\n        return plateauArray;\n    }\n\n    renderPions(i,j) {\n        if (i >= this.state.size - this.state.pionsPattern.length || i < this.state.pionsPattern.length) {\n            let color = (this.state.size / 2 <= i) ? this.state.colors.firstColor.first : this.state.colors.secondaryColor.first;\n            let borderColor = (this.state.size / 2 <= i) ? this.state.colors.firstColor.secondary : this.state.colors.secondaryColor.secondary;\n            let type = \"pion\";\n            let team = \"\";\n            if (i < this.state.pionsPattern.length) {\n                type = this.state.pionsPattern[i][j];\n                team = \"black\"\n            }\n\n            if (i >= this.state.size - this.state.pionsPattern.length) {\n                type = this.state.pionsPattern[this.state.size-i-1][j];\n                team = \"white\"\n            }\n            return <Pion\n                askPopUp={this.props.askPopUp}\n                typeToChange={this.props.typeToChange}\n                rotation={this.props.rotation}\n                changePions={this.changePions.bind(this)}\n                getThis={this.getThis.bind(this)}\n                change={this.changeArray.bind(this)}\n                key={i+j+\"p\"} x={j} y={i}\n                plateau={this}\n                colors={{color: color, borderColor: borderColor}}\n                type={type}\n                team={team}\n                inEchec={this.inEchec.bind(this)}\n                echec={this.state.echec}\n                changeKingPos={this.changeKingPos.bind(this)}\n                testPat={this.testPat.bind(this)}\n                testMat={this.testMat.bind(this)}\n                kingPos={this.state.kingPos}\n            />\n        }\n        return null;\n    }\n\n\n\n    testPat(pionsArray) {\n        if (this.teamOnPat(\"white\",pionsArray)) {\n            this.props.askPopUp(\"pat\",\"white\",() => {console.log(\"e\")})\n        }\n        if (this.teamOnPat(\"black\",pionsArray)) {\n            this.props.askPopUp(\"pat\",\"black\",() => {console.log(\"e\")})\n        }\n    }\n\n    testMat(pionsArray,kingPos) {\n        if (this.teamOnMat(\"white\",pionsArray,kingPos)) {\n            this.props.askPopUp(\"mat\",\"white\",() => {console.log(\"e\")})\n        }\n        if (this.teamOnMat(\"black\",pionsArray,kingPos)) {\n            this.props.askPopUp(\"mat\",\"black\",() => {console.log(\"e\")})\n        }\n    }\n\n    render() {\n        let style = {\n            gridTemplate: \"repeat(\"+this.props.size+\",1fr) / repeat(\"+this.props.size+\",1fr)\",\n            border: \"15px outset \" + this.state.colors.firstColor.secondary,\n            transform: \"rotate(\" + this.props.rotation + \"deg)\"\n        };\n\n\n\n        return (\n          <div onClick={this.chooseCase} id=\"plateau\" style={style}>\n            {\n                this.renderPlateau()\n            }\n          </div>\n        );\n    }\n\n    teamOnPat = (team,pionsArray) => {\n\n        for (let pionRow of pionsArray) {\n            for (let pion of pionRow) {\n                if (pion !== \"empty\") {\n                    if (pion.state.team === team) {\n                        if (pion.getAllPossibleCases(pionsArray).length > 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    teamOnMat = (team,pionsArray,pos) => {\n        let kingPos = this.state.kingPos[team];\n        if (pos !== false) {\n            kingPos = pos;\n        }\n\n\n        let king = pionsArray[kingPos.x][kingPos.y];\n        console.log(king);\n        if (king.checkLine(kingPos,pionsArray)) return false;\n        if (king.getAllPossibleCases(pionsArray) > 0) return false;\n\n        for (let pionRow of this.state.pions) {\n            for (let pion of pionRow) {\n                if (pion !== \"empty\") {\n                    if (pion.state.team === team) {\n                        if (pion.getAllPossibleCases(pionsArray).length > 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    chooseCase = (e) => {\n        if (this.state.choosing.isChoosing) {\n            let emptyArray = this.createArrayCases();\n            this.setState({cases: emptyArray, choosing: {isChoosing: false, pion: null}});\n        }\n    }\n}\n","import React from 'react';\nimport '../build/popup.min.css';\n\nexport default class PopUp extends React.Component {\n\n    renderPopup() {\n        switch (this.props.type) {\n            case \"endPlateau\":\n                return (\n                    <div>\n                        <h2>Choose your new pawn type ?</h2>\n                        <div>\n                            <button onClick={() => {this.props.changeType(\"queen\")}}>\n                                <i className=\"fas fa-chess-queen\"></i>\n                            </button>\n                            <button onClick={() => {this.props.changeType(\"rook\")}}>\n                                <i className=\"fas fa-chess-rook\"></i>\n                            </button>\n                            <button onClick={() => {this.props.changeType(\"bishop\")}}>\n                                <i className=\"fas fa-chess-bishop\"></i>\n                            </button>\n                            <button onClick={() => {this.props.changeType(\"knight\")}}>\n                                <i className=\"fas fa-chess-knight\"></i>\n                            </button>\n                        </div>\n                    </div>\n                );\n            case \"win\":\n                return (\n                    <div>\n                        <h2>The {this.props.winnerTeam} team win !</h2>\n                    </div>\n                );\n            case \"pat\":\n                return (\n                    <div>\n                        <h2>{this.props.winnerTeam} team is on Pat !</h2>\n                    </div>\n                );\n            case \"mat\":\n                return (\n                    <div>\n                        <h2>{this.props.winnerTeam} team is on Mat !</h2>\n                    </div>\n                );\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"popupContainer\">\n                {\n                    this.renderPopup()\n                }\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Plateau from './elements/Plateau';\nimport PopUp from './elements/PopUp';\nimport './App.css';\nimport './build/pla.min.css';\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.colors = {\n            firstColor: {\n                first: \"#d7d6e2\",\n                secondary: \"#f7f6ff\"\n            },\n            secondaryColor: {\n                first: \"#bdbbc7\",\n                secondary: \"#9795a1\"\n            }\n        };\n        this.pionsPattern = [\n            [\"rook\",\"knight\",\"bishop\",\"queen\",\"king\",\"bishop\",\"knight\",\"rook\"],\n            [\"pawn\",\"pawn\",\"pawn\",\"pawn\",\"pawn\",\"pawn\",\"pawn\",\"pawn\"]\n        ];\n        this.state = {\n            lastAngle: 0,\n            lastRotation: 0,\n            rotation: 0,\n            clicked: false,\n            askNewType: false,\n            func: null,\n            type: \"\",\n            winnerTeam: \"\",\n        }\n    }\n\n    changeType(newType) {\n        this.setState({askNewType: false});\n        this.state.func(newType);\n    }\n\n    createPopUp() {\n        if (this.state.askNewType) {\n            return <PopUp type={this.state.type} winnerTeam={this.state.winnerTeam} changeType={this.changeType.bind(this)}/>\n        }\n    }\n\n    askPopUp(type,team,func) {\n        this.setState({type: type, winnerTeam: team, func: func, askNewType: true});\n    }\n\n    render() {\n\n        return (\n        <div id=\"container\">\n            <Plateau askPopUp={this.askPopUp.bind(this)} typeToChange={this.state.newType} rotation={this.state.rotation} size={8} colors={this.colors} pionsPattern={this.pionsPattern}/>\n            <div style={{zIndex: (this.state.clicked) ? 1 : 0}} id=\"pla\" onDoubleClick={this.rotateTooTurn} onMouseMove={this.rotation} onMouseUp={this.stopRotation} onMouseOut={this.stopRotation} onMouseDown={this.startRotation}/>\n            {\n                this.createPopUp()\n            }\n        </div>\n        );\n    }\n\n    startRotation = (e) => {\n        e.stopPropagation();\n        let x = this.getAngle(e.clientX - window.innerWidth/2, e.clientY - window.innerHeight/2);\n\n        this.setState({lastAngle: x, clicked: true});\n    }\n\n    stopRotation = (e) => {\n        e.stopPropagation();\n        let currRotation = this.state.rotation;\n        this.setState({lastRotation: currRotation, clicked: false});\n    }\n\n    rotation = (e) => {\n        e.stopPropagation();\n        if (this.state.clicked) {\n            let cursorAngle = this.getAngle(e.clientX - window.innerWidth/2, e.clientY - window.innerHeight/2) - this.state.lastAngle;\n            let currRotation = this.state.lastRotation;\n            this.setState({rotation: currRotation + cursorAngle});\n        }\n    }\n\n    rotateTooTurn = (e) => {\n        e.stopPropagation();\n        let currRotation = this.state.lastRotation;\n        this.setState({rotation: currRotation + 180});\n    }\n\n\n    /// get Angle\n\n    getAngle = (x,y) => {\n        let angle = Math.atan2(y, x);\n        let degrees = 180*angle/Math.PI;\n        return (360+degrees)%360;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}